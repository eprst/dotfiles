" {{{1 global settings
set nocompatible
set vb
set backspace+=indent,eol,start
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set fo=tcrqnlv1
set tw=80
set wrap
set linebreak
set ai
set mouse=a
set hidden
set number
set laststatus=2
set wildmenu
set wildmode=list:longest
set ignorecase " ignore case when searching
set smartcase  " don't ignore case when there's one captial letter
" set gdefault " /g by default for replace || very easy to forget and be confused
" set rnu " relative line numbers (disabled, they're slow)
set undofile " persistent per-file undo

set incsearch
set showmatch
set hlsearch

set shortmess+=I " don't show intro when starting vim
set dir=~/tmp/vim//,~/tmp//,/var/tmp//,/tmp//" keep swap files in this locations
set bdir=~/tmp/vim//,~/tmp//,/var/tmp//,/tmp//" keep backup files in this locations
set undodir=~/tmp/vim,~/tmp,/var/tmp,/tmp,." keep undo files in this locations
let g:yankring_history_dir = '~/tmp/vim,~/tmp,/tmp,/var/tmp,~'
set tags=tags; " look for tags in current folder, then in parent folder etc
let g:airline_powerline_fonts = 1
let g:airline_theme = 'solarized'

let g:dark = filereadable(expand('~/.dark'))
" }}}

" {{{1 neobundle
if has('vim_starting')
  set runtimepath+=~/.vim/bundle/neobundle.vim
endif

call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'Shougo/vimproc', {
      \ 'build' : {
      \     'windows' : 'make -f make_mingw32.mak',
      \     'cygwin' : 'make -f make_cygwin.mak',
      \     'mac' : 'make -f make_mac.mak',
      \     'unix' : 'make -f make_unix.mak',
      \    },
      \ }
" see mappings below. \t=file_rec T=file_rec/git f=file r=mru l=locate o=outline
" y=yank history b=buffer g=grep G=grep word under cursor
NeoBundle 'Shougo/unite.vim'                  " :Unite file or file_rec/async
NeoBundle 'Shougo/unite-outline'              " :Unite outline
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'ujihisa/unite-locate'              " :Unite locate
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'ervandew/supertab'
NeoBundle 'repos-scala/scala-vundle'
NeoBundle 'YankRing.vim'                      " :YRShow, <C-P> after p
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'vimoutliner/vimoutliner'           " for .otl files.. really needed?
NeoBundle 'chela_light'
NeoBundle 'bling/vim-airline'
NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'choffee/openscad.vim'
NeoBundle 'terryma/vim-multiple-cursors'      " Ctrl-N to add new cursor
NeoBundle 'szw/vim-maximizer'                 " F5 to toggle maximize
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'            " next ]c prev [c preview \hp, stage \hs, revert \hr
NeoBundle 'majutsushi/tagbar'                 " :TagbarToggle
NeoBundle 'godlygeek/tabular'                 " needed for the next one. :Tab /= tab on '=' vimcasts.org/e/29
NeoBundle 'plasticboy/vim-markdown'
NeoBundle 'JamshedVesuna/vim-markdown-preview' " ctrl-q to preview
NeoBundle 'sukima/xmledit'
NeoBundle 'xolox/vim-misc'    " required by vim-notes
NeoBundle 'xolox/vim-notes'
" typescript support
" NeoBundle 'leafgarland/typescript-vim'
" NeoBundle 'jason0x43/vim-js-indent'
" NeoBundle 'Quramy/tsuquyomi'

call neobundle#end()
" }}}

" {{{1 syntax
filetype plugin indent on     " required!
syntax on
" if still not getting colors (eg ubuntu): comment out 'syntax on' in
" /usr/share/vim/vimrc
" }}}

" {{{1 bindings
" {{{2 alt-1 to find current file
nnoremap <silent> <M-1> :NERDTreeFind<CR>
nnoremap <silent> 1 :NERDTreeFind<CR>
nnoremap <silent> ! :NERDTreeFind<CR>
nnoremap <silent> ¡ :NERDTreeFind<CR>
" }}}

" {{{2 misc bindings
nmap <F4> :q<CR>
nmap <F3> :qa!<CR>
nmap <F2> :wqa<CR>
nmap w :q<CR>
nmap <c-s> :w<CR>
nnoremap <leader><space> :noh<cr>
" inoremap jj <ESC> " cool but won't work in ideavim

" expand/collaps folds by space
nnoremap  <silent>  <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<cr>

" yank into system clipboard
noremap <leader>y "*y
" yank line into system clipboard
noremap <leader>yy "*yy

" paste from system clipboard preserving indent
noremap <leader>p :set paste<CR>:put *<CR>:set nopaste<CR>

" ctrl-arrows for tabs
nnoremap [1;5D :tabp<CR>
nnoremap [1;5C :tabn<CR>
nnoremap [D :tabp<CR>
nnoremap [C :tabn<CR>

" map ctrl-q to save and markdown preview
nnoremap <c-q> :w<CR>:call Vim_Markdown_Preview()<CR>
" }}}

" {{{2 maximize-toggle
nnoremap <silent><F5> :MaximizerToggle<CR>
vnoremap <silent><F5> :MaximizerToggle<CR>gv
inoremap <silent><F5> <C-o>:MaximizerToggle<CR>
" }}}
" }}}

" {{{1 commands
" CD to directory containing current file
command! CD :cd %:h
" }}}

" {{{1 Unite settings
" let g:unite_source_history_yank_enable = 1
let g:unite_redraw_hold_candidates = 50000
call unite#filters#matcher_default#use(['matcher_fuzzy'])
call unite#custom#source(
      \ 'buffer,file_rec,file_rec/async,file_rec/git', 'matchers',
      \ ['converter_relative_word', 'matcher_fuzzy'])
      " ['converter_relative_word', 'matcher_fuzzy', 'matcher_project_ignore_files'])

nnoremap <leader>t :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/async:!<cr>
nnoremap <leader>T :<C-u>Unite -no-split -buffer-name=files   -start-insert file_rec/git:!<cr>
nnoremap <leader>f :<C-u>Unite -no-split -buffer-name=files   -start-insert file<cr>
nnoremap <leader>r :<C-u>Unite -no-split -buffer-name=mru     -start-insert file_mru<cr>
nnoremap <leader>l :<C-u>Unite -no-split -buffer-name=locate  -start-insert locate<cr>
nnoremap <leader>o :<C-u>Unite -buffer-name=outline -vertical -start-insert outline<cr>
nnoremap <leader>y :<C-u>Unite -buffer-name=yank    history/yank<cr>
nnoremap <leader>b :<C-u>Unite -buffer-name=buffer  buffer -quick-match<cr>
nnoremap <leader>g :<C-u>Unite -no-split -auto-preview -auto-highlight  grep:.<cr>
nnoremap <leader>G :<C-u>UniteWithCursorWord -no-split -auto-preview -auto-highlight  grep:.<cr>

" Use ag for search if available
if executable('ag')
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts = '--nogroup --nocolor --column'
  let g:unite_source_grep_recursive_opt = ''
endif

" {{{2 Custom mappings for the unite buffer
autocmd FileType unite call s:unite_settings()
function! s:unite_settings()
  " Play nice with supertab
  let b:SuperTabDisabled=1
  " Enable navigation with control-j and control-k in insert mode
  inoremap <buffer> <C-j>   <Plug>(unite_select_next_line)
  inoremap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  " Run "split" action by <C-s>
  inoremap <silent><buffer><expr> <C-s>  unite#do_action('split')
  inoremap <silent><buffer><expr> <C-v>  unite#do_action('vsplit')
  " Close Unite by ESC
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction
" }}}
" }}}

" {{{1 color tweaks
if g:dark
  set background=dark
  if has("gui_running")
    colorscheme evening
  endif
else
  set background=light
  colorscheme solarized
endif
hi clear SignColumn
if has("gui_macvim")
  "set guifont=Source\ Code\ Pro\ for\ Powerline:h14
  set guifont=FiraCode-Regular:h14
elseif has("gui_running")
  "set guifont=Source\ Code\ Pro\ for\ Powerline\ 12
  "set guifont=Ubuntu\ Mono\ for\ Powerline\ 12
  set guifont=Fira\ Code\ weight=453\ 14
else
  try
    " colorscheme chela_light
    if ! g:dark
      hi LineNr ctermbg=lightgray
    endif
    hi Search ctermbg=227
  catch
  endtry
endif
hi VisualNOS term=reverse ctermbg=220 cterm=none
set listchars=nbsp:␣,trail:•,extends:⟩,precedes:⟨
if has("gui_running")
  set list
  set showbreak=↪\ 
  " set listchars=tab:→\ ,eol:¬,nbsp:␣,trail:•,extends:⟩,precedes:⟨
  hi SpecialKey guifg=red
  hi NonText guifg=grey90
end
" }}}

" {{{1 have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif
" }}}

" vim:foldmethod=marker:
